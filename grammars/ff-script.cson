name: "FontForge Script"
scopeName: "source.fontforge"
fileTypes: ["ff", "pe"]
firstLineMatch: """(?x)
	# Hashbang
	^\\#!.*?[/ ](?:fontforge|pfaedit)(?=\\s|$)\\b
	(?!.*?[ \\t]-lang(?:=|\\s+)py)
	|
	# Modeline
	(?:
		# Emacs
		-\\*-(?i:[ \\t]*(?=[^:;\\s]+[ \\t]*-\\*-)|(?:.*?[ \\t;]|(?<=-\\*-))[ \\t]*mode[ \\t]*:[ \\t]*)
			(?i:fontforge|pfaedit)
		(?=[ \\t;]|(?<![-*])-\\*-).*?-\\*-
		
		|
		
		# Vim
		(?:(?:^|[ \\t])(?:vi|Vi(?=m))(?:m[<=>]?[0-9]+|m)?|[ \\t]ex)(?=:(?=[ \\t]*set?[ \\t][^\\r\\n:]+:)|:(?![ \\t]*set?[ \\t]))
		(?:(?:[ \\t]*:[ \\t]*|[ \\t])\\w*(?:[ \\t]*=(?:[^\\\\\\s]|\\\\.)*)?)*[ \\t:]
		(?:filetype|ft|syntax)[ \\t]*=
			(?i:fontforge|pfaedit)
		(?=$|\\s|:)
	)
"""
patterns: [include: "#main"]

repository:
	main:
		patterns: [
			{include: "#comments"}
			{include: "#codepoint"}
			{include: "#strings"}
			{include: "#control"}
			{include: "#real"}
			{include: "#integer"}
			{include: "#operators"}
			{include: "#procedureCall"}
			{include: "#punctuation"}
			{include: "#variables"}
		]
	
	comments:
		patterns: [{
			name: "comment.line.number-sign.fontforge"
			begin: "#"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.fontforge"
			patterns: [include: "#lineContinuation"]
		},{
			name: "comment.block.fontforge"
			begin: "/\\*"
			end:   "\\*/"
			beginCaptures: 0: name: "punctuation.definition.comment.begin.fontforge"
			endCaptures:   0: name: "punctuation.definition.comment.end.fontforge"
		},{
			name: "comment.line.double-slash"
			begin: "//"
			end:   "$"
			beginCaptures:
				0: name: "punctuation.definition.comment.fontforge"
			patterns: [include: "#lineContinuation"]
		}]


	# Line ending with a backslash
	lineContinuation:
		begin: "(\\\\)$\\s*"
		end:   "^"
		beginCaptures:
			1: name: "constant.character.escape.line-continuation.fontforge"


	# Bundled group imported by SFD grammar
	shared:
		patterns: [
			{include: "#codepoint"}
			{include: "#strings"}
			{include: "#real"}
			{include: "#integer"}
			{include: "#punctuation"}
			{include: "#operators"}
		]
		

	strings:
		patterns: [{
			name: "string.double.quoted.fontforge"
			begin: '"'
			end:   '"|$'
			beginCaptures: 0: name: "punctuation.definition.string.begin.fontforge"
			endCaptures:   0: name: "punctuation.definition.string.end.fontforge"
			patterns: [include: "#stringEscapes"]
		},{
			name: "string.single.quoted.fontforge"
			begin: "'"
			end:   "'|$"
			beginCaptures: 0: name: "punctuation.definition.string.begin.fontforge"
			endCaptures:   0: name: "punctuation.definition.string.end.fontforge"
			patterns: [include: "#stringEscapes"]
		}]

	stringEscapes:
		patterns: [{
			name: "constant.character.escape.newline.fontforge"
			match: "\\\\n"
		}, include: "#lineContinuation"]

	control:
		name: "keyword.control.flow.$1.fontforge"
		match: "(?<![$.@/])\\b(if|elseif|else|endif|while|endloop|foreach|break|return|shift)\\b(?![$.@/])"

	operators:
		patterns: [
			{match: "==|!=|>=|<=|>|<",  name: "keyword.operator.comparison.fontforge"}
			{match: "=|[-+*/%]=",       name: "keyword.operator.assignment.compound.fontforge"}
			{match: "--",               name: "keyword.operator.decrement.fontforge"}
			{match: "\\+{2}",           name: "keyword.operator.increment.fontforge"}
			{match: "[-+/*~!]",         name: "keyword.operator.arithmetic.fontforge"}
			{match: "&&|\\|\\|",        name: "keyword.operator.logical.fontforge"}
			{match: "&|\\||\\\\\\^",    name: "keyword.operator.bitwise.fontforge"}
			
			match: ":[htre]"
			name: "keyword.operator.pathspec.fontforge"
			captures:
				0: patterns: [include: "#punctuation"]
		]

	procedureCall:
		patterns: [{
			# Built-in procedures
			name: "meta.function-call.builtin.fontforge"
			begin: "(?x) (?<![$.@/]) \\b
				( ATan2
				| AddAccent
				| AddAnchorClass
				| AddAnchorPoint
				| AddDHint
				| AddExtrema
				| AddHHint
				| AddInstrs
				| AddLookupSubtable
				| AddLookup
				| AddPosSub
				| AddSizeFeature
				| AddVHint
				| ApplySubstitution
				| Array
				| AskUser
				| AutoCounter
				| AutoHint
				| AutoInstr
				| AutoKern
				| AutoTrace
				| AutoWidth
				| BitmapsAvail
				| BitmapsRegen
				| BuildAccented
				| BuildComposite
				| BuildDuplicate
				| CIDChangeSubFont
				| CIDFlattenByCMap
				| CIDFlatten
				| CIDSetFontNames
				| CanonicalContours
				| CanonicalStart
				| Ceil
				| CenterInWidth
				| ChangePrivateEntry
				| ChangeWeight
				| CharCnt
				| CheckForAnchorClass
				| Chr
				| ClearBackground
				| ClearGlyphCounterMasks
				| ClearHints
				| ClearInstrs
				| ClearPrivateEntry
				| ClearTable
				| Clear
				| Close
				| CompareFonts
				| CompareGlyphs
				| ConvertByCMap
				| ConvertToCID
				| CopyAnchors
				| CopyFgToBg
				| CopyLBearing
				| CopyRBearing
				| CopyReference
				| CopyUnlinked
				| CopyVWidth
				| CopyWidth
				| Copy
				| CorrectDirection
				| Cos
				| Cut
				| DefaultOtherSubrs
				| DefaultRoundToGrid
				| DefaultUseMyMetrics
				| DetachAndRemoveGlyphs
				| DetachGlyphs
				| DontAutoHint
				| DrawsSomething
				| Error
				| ExpandStroke
				| Export
				| Exp
				| FileAccess
				| FindIntersections
				| FindOrAddCvtIndex
				| Floor
				| FontImage
				| FontsInFile
				| GenerateFamily
				| GenerateFeatureFile
				| Generate
				| GetAnchorPoints
				| GetCvtAt
				| GetEnv
				| GetFontBoundingBox
				| GetLookupInfo
				| GetLookupOfSubtable
				| GetLookupSubtables
				| GetLookups
				| GetMaxpValue
				| GetOS2Value
				| GetPosSub
				| GetPref
				| GetPrivateEntry
				| GetSubtableOfAnchor
				| GetTTFName
				| GetTeXParam
				| GlyphInfo
				| HFlip
				| HasPreservedTable
				| HasPrivateEntry
				| Import
				| InFont
				| Inline
				| InterpolateFonts
				| Int
				| IsAlNum
				| IsAlpha
				| IsDigit
				| IsFinite
				| IsFraction
				| IsHexDigit
				| IsLigature
				| IsLower
				| IsNan
				| IsOtherFraction
				| IsSpace
				| IsUpper
				| IsVulgarFraction
				| Italic
				| Join
				| LoadEncodingFile
				| LoadNamelistDir
				| LoadNamelist
				| LoadPrefs
				| LoadStringFromFile
				| LoadTableFromFile
				| Log
				| LookupSetFeatureList
				| LookupStoreLigatureInAfm
				| MMAxisBounds
				| MMAxisNames
				| MMBlendToNewFont
				| MMChangeInstance
				| MMChangeWeight
				| MMInstanceNames
				| MMWeightedName
				| MergeFeature
				| MergeFonts
				| MergeKern
				| MergeLookupSubtables
				| MergeLookups
				| MoveReference
				| Move
				| MultipleEncodingsToReferences
				| NameFromUnicode
				| NearlyHvCps
				| NearlyHvLines
				| NearlyLines
				| New
				| NonLinearTransform
				| Open
				| Ord
				| Outline
				| OverlapIntersect
				| PasteWithOffset
				| Paste
				| PositionReference
				| PostNotice
				| Pow
				| PreloadCidmap
				| PrintFont
				| PrintSetup
				| Print
				| Quit
				| Rand
				| ReadOtherSubrsFile
				| Real
				| Reencode
				| RemoveAllKerns
				| RemoveAllVKerns
				| RemoveAnchorClass
				| RemoveDetachedGlyphs
				| RemoveLookupSubtable
				| RemoveLookup
				| RemoveOverlap
				| RemovePosSub
				| RemovePreservedTable
				| RenameGlyphs
				| ReplaceCvtAt
				| ReplaceGlyphCounterMasks
				| ReplaceWithReference
				| RevertToBackup
				| Revert
				| Rotate
				| RoundToCluster
				| RoundToInt
				| Round
				| SameGlyphAs
				| SavePrefs
				| SaveTableToFile
				| Save
				| ScaleToEm
				| Scale
				| SelectAllInstancesOf
				| SelectAll
				| SelectBitmap
				| SelectByPosSub
				| SelectChanged
				| SelectFewerSingletons
				| SelectFewer
				| SelectGlyphsBoth
				| SelectGlyphsReferences
				| SelectGlyphsSplines
				| SelectHintingNeeded
				| SelectIf
				| SelectInvert
				| SelectMoreIf
				| SelectMoreSingletonsIf
				| SelectMoreSingletons
				| SelectMore
				| SelectNone
				| SelectSingletonsIf
				| SelectSingletons
				| SelectWorthOutputting
				| Select
				| SetCharCnt
				| SetFondName
				| SetFontHasVerticalMetrics
				| SetFontNames
				| SetFontOrder
				| SetGasp
				| SetGlyphChanged
				| SetGlyphClass
				| SetGlyphColor
				| SetGlyphComment
				| SetGlyphCounterMask
				| SetGlyphName
				| SetGlyphTeX
				| SetItalicAngle
				| SetKern
				| SetLBearing
				| SetMacStyle
				| SetMaxpValue
				| SetOS2Value
				| SetPanose
				| SetPref
				| SetRBearing
				| SetTTFName
				| SetTeXParams
				| SetUnicodeValue
				| SetUniqueID
				| SetVKern
				| SetVWidth
				| SetWidth
				| Shadow
				| Simplify
				| Sin
				| SizeOf
				| Skew
				| SmallCaps
				| Sqrt
				| StrJoin
				| StrSplit
				| Strcasecmp
				| Strcasestr
				| Strftime
				| Strlen
				| Strrstr
				| Strskipint
				| Strstr
				| Strsub
				| Strtod
				| Strtol
				| SubstitutionPoints
				| Tan
				| ToLower
				| ToMirror
				| ToString
				| ToUpper
				| Transform
				| TypeOf
				| UCodePoint
				| Ucs4
				| UnicodeFromName
				| UnlinkReference
				| Utf8
				| VFlip
				| VKernFromHKern
				| Wireframe
				| WorthOutputting
				| WriteStringToFile
				) \\s* (\\()"
			end: "\\)"
			beginCaptures:
				1: name: "support.function.built-in.fontforge"
				2: name: "punctuation.definition.arguments.bracket.round.begin.fontforge"
			endCaptures:
				0: name: "punctuation.definition.arguments.bracket.round.begin.fontforge"
			contentName: "meta.function-call.arguments.fontforge"
			patterns: [include: "#main"]
		},{
			# User-defined
			name:  "meta.function-call.user-defined.fontforge"
			begin: "(?:(?<![$.@/])\\b((?!\\.?\\d)[A-Za-z$_.\\d@/]+)|(?<=['\"\\)]))\\s*(\\()"
			end:   "\\)"
			beginCaptures:
				1: name: "entity.name.function.fontforge"
				2: name: "punctuation.definition.arguments.bracket.round.begin.fontforge"
			endCaptures:
				0: name: "punctuation.definition.arguments.bracket.round.end.fontforge"
			contentName: "meta.function-call.arguments.fontforge"
			patterns: [include: "#main"]
		},{
			# Indirect/dynamic
			name: "meta.function-call.indirect.fontforge"
			match: """(?x)
				(?:^|(?<!\\*/|['"\\)A-Za-z$_.\\d@/])
				(?<=\\S))
				\\s* (\\()
				( "[^"]*+"
				| '[^']*+'
				| (?!["']) [^\\(\\)]* [^\\s\\(\\)]+ [^\\(\\)]*
				) (\\))
				(?=\\s*\\()
			"""
			captures:
				0: name: "meta.expression.fontforge"
				1: name: "punctuation.bracket.begin.round.fontforge"
				2: patterns: [include: "#main"]
				3: name: "punctuation.bracket.end.round.fontforge"
		}]
	
	punctuation:
		patterns: [
			{match: ",", name: "punctuation.separator.comma.fontforge"}
			{match: ";", name: "punctuation.terminator.statement.fontforge"}
			{match: ":", name: "punctuation.delimiter.colon.fontforge"},{
				
				name: "meta.expression.chained.fontforge"
				begin: "\\["
				end:   "\\]"
				beginCaptures: 0: name: "punctuation.bracket.begin.square.fontforge"
				endCaptures:   0: name: "punctuation.bracket.end.square.fontforge"
				patterns: [include: "#main"]
			},{
				
				name: "meta.expression.fontforge"
				begin: "\\("
				end:   "\\)"
				beginCaptures: 0: name: "punctuation.bracket.begin.round.fontforge"
				endCaptures:   0: name: "punctuation.bracket.end.round.fontforge"
				patterns: [include: "#main"]
			}]
		
	codepoint:
		name: "constant.numeric.other.codepoint.fontforge"
		match: "0[uU][A-Fa-f0-9]+"
	
	real:
		name: "constant.numeric.float.fontforge"
		match: "(?<!\\w)[-+]?\\d*\\.\\d+"
	
	integer:
		patterns: [
			{match: "(?<!\\w)[-+]?0[Xx][A-Fa-f0-9]+", name: "constant.numeric.integer.hexadecimal.fontforge"}
			{match: "(?<!\\w)[-+]?(?=0)\\d+",         name: "constant.numeric.integer.octal.fontforge"}
			{match: "(?<!\\w)[-+]?\\d+",              name: "constant.numeric.integer.decimal.fontforge"}
		]
	
	variables:
		patterns: [{
			name: "variable.language.readonly.positional.fontforge"
			match: "(\\$)\\d+(?=\\W)"
			captures:
				1: name: "punctuation.definition.variable.fontforge"
		},{
			name: "variable.language.readonly.fontforge"
			match: "(\\$)\\w+"
			captures:
				1: name: "punctuation.definition.variable.fontforge"
		},{
			name: "variable.other.global.fontforge"
			match: "(_)\\w+"
			captures:
				1: name: "punctuation.definition.variable.fontforge"
		},{
			name: "variable.other.font.fontforge"
			match: "(@)\\w+"
			captures:
				1: name: "punctuation.definition.variable.fontforge"
		},{
			name: "variable.other.local.fontforge"
			match: "(?=[A-Za-z])\\w+"
		}]
