name: "Adobe Font Metrics"
scopeName: "source.afm"
fileTypes: ["afm", "amfm", "acfm"]
firstLineMatch: "\\AStart(?:Comp|Master)?FontMetrics\\s+(?:\\d+(?:\\.\\d+)?)\\s*$"
patterns: [
	{include: "#resources"}
	{include: "#main"}
]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#real"}
			{include: "#integer"}
			{include: "#keywords"}
		]


	# Constants used by Boolean-typed keywords
	boolean:
		name: "constant.language.boolean.$1.afm"
		match: "(?<!\\w)(true|false)(?!\\w)"
	
	
	# Contents of a "Comment" command, discarded by interpreter
	comment:
		contentName: "comment.line.afm"
		begin: "^Comment(?=\\s|$)"
		end:   "$"
		beginCaptures:
			0: name: "keyword.operator.start-comment.afm"


	# Integer literals
	integer:
		patterns: [
			{match: "(?<!\\w)[-+]?0[Xx][A-Fa-f0-9]+", name: "constant.numeric.integer.hexadecimal.fontforge"}
			{match: "(?<!\\w)[-+]?(?=0)\\d+",         name: "constant.numeric.integer.octal.fontforge"}
			{match: "(?<!\\w)[-+]?\\d+",              name: "constant.numeric.integer.decimal.fontforge"}
		]
	
	
	# Language directives
	keywords:
		patterns: [{
			
			# Font names
			name: "meta.${1:/downcase}-name.afm"
			begin: "^(Font|Full|Family)Name(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramName"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}-name.afm"
		},{
			# Writing directions described by file (0-1 only, 2 both)
			name: "meta.writing-directions.afm"
			begin: "^MetricsSets(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramInteger"]
			beginCaptures:
				0: name: "keyword.operator.metrics-sets.afm"
		},{
			# Whether this is a monospaced/fixed-width typeface
			name: "meta.is-monospaced-font.afm"
			begin: "^IsFixedPitch(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramBoolean"]
			beginCaptures:
				0: name: "keyword.operator.is-fixed-pitch.afm"
		},{
			# Trademark or copyright info
			name: "meta.notice.afm"
			begin: "^Notice(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.notice.afm"
		},{
			# Version pertaining to last revision
			name: "meta.revision.afm"
			begin: "^Version(?=\\s|$)"
			end:   "^|$"
			patterns: [{
				match: "\\G\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
				name: "constant.numeric.float.decimal.version-number.afm"
			}, include: "#paramInvalid"]
			beginCaptures:
				0: name: "keyword.operator.version.afm"
		},{
			# Weight type
			name: "meta.weight.afm"
			begin: "^Weight(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.weight.afm"
		},{
			# Italic angle
			name: "meta.italic-angle.afm"
			begin: "^ItalicAngle(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.italic-angle.afm"
		},{
			# Bounding box
			name: "meta.bounding-box.afm"
			begin: "^FontBBox(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumbers"]
			beginCaptures:
				0: name: "keyword.operator.font-bbox.afm"
		},{
			# Encoding scheme
			name: "meta.encoding-scheme.afm"
			begin: "^EncodingScheme(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.encoding-scheme.afm"
		},{
			# Underline-specific global metric
			name: "meta.underline-property.${1:/downcase}.afm"
			begin: "^Underline(Position|Thickness)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.underline-${1:/downcase}.afm"
		},{
			# Cap/X-height
			name: "meta.metric.${1:/downcase}-height.afm"
			begin: "^(Cap|X)Height(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}-height.afm"
		},{
			# Descender/Ascender height
			name: "meta.metric.${1:/downcase}.afm"
			begin: "^(Descender|Ascender)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}.afm"
		}]
	
	
	
	# Boolean-typed property
	paramBoolean:
		patterns: [{
			match: "\\G\\s+(true|false)\\s*$"
			captures:
				1: patterns: [include: "#boolean"]
		}, include: "#paramInvalid"]
	
	
	# Value of an integer-typed keyword
	paramInteger:
		patterns: [{
			match: "\\G\\s+([0-9]+)\\s*$"
			captures: 1: patterns: [include: "#integer"]
		}, include: "#paramInvalid"]
	
	
	# Something that doesn't belong where it was found
	paramInvalid:
		match: "\\G\\s+(\\S+.+)\\s*$"
		captures:
			1: name: "invalid.illegal.syntax.type.afm"
	
	
	# Same as `paramString`, except with different scope
	paramName:
		match: "\\G\\s+(\\S+.*)\\s*$"
		captures:
			1: name: "entity.name.identifier.afm"
	
	
	# Any numeric value: Either floating-point or integer
	paramNumber:
		patterns: [{
			match: "\\G\\s+([-+]?(?:\\d*\\.\\d+|\\d+))\\s*$"
			captures: 1: patterns: [
				{include: "#real"}
				{include: "#integer"}]
		}, include: "#paramInvalid"]
	
	# Multiple numeric values
	paramNumbers:
		patterns: [
			{include: "#real"}
			{include: "#integer"}
			
			match: "(?![-+0-9.])\\S+",
			name: "invalid.illegal.syntax.type.afm"]
	
	
	# Freeform character data, extending to EOL. Quotes not required.
	paramString:
		name: "variable.assignment.afm"
		match: "\\G\\s+(\\S.*)\\s*$"
		captures:
			1: name: "string.unquoted.afm"
	
	
	# Generic variable reference
	paramVar:
		match: "\\G\\s+(\\S.*)\\s*$"
		captures:
			1: name: "variable.assignment.afm"
	
	
	# Floating-point numbers
	real:
		name: "constant.numeric.float.afm"
		match: "(?<!\\w)[-+]?\\d*\\.\\d+"


	# Sections of AFM source delimited by `(Start|End)â€¦`-type statements
	resources:
		patterns: [{
			
			# AFM: Font Metrics file
			name: "meta.metrics.file-resource.afm"
			begin: "^(StartFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		},{
			
			# ACFM: Composite Font Metrics
			name: "meta.composite.metrics.file-resource.afm"
			begin: "^(StartCompFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndCompFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		},{
			
			# AMFM: Master Font Metrics
			name: "meta.master.metrics.file-resource.afm"
			begin: "^(StartMasterFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndMasterFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		}]
