name: "Adobe Font Metrics"
scopeName: "source.afm"
fileTypes: ["afm", "amfm", "acfm", "amm"]
firstLineMatch: "\\AStart(?:Comp|Master)?FontMetrics\\s+(?:\\d+(?:\\.\\d+)?)\\s*$"
maxTokensPerLine: 2048,
patterns: [
	{include: "#resources"}
	{include: "#main"}
]

repository:
	main:
		patterns: [
			{include: "#comment"}
			{include: "#real"}
			{include: "#integer"}
			{include: "#array"}
			{include: "#globalInfo"}
			{include: "#kerningData"}
			{include: "#charMetrics"}
			{include: "#compositesData"}
			{include: "#amfmSpecific"}
			{include: "#direction"}
			{include: "#primaryFonts"}
			{include: "#reserved"}
			{include: "#userDefined"}
		]


	# List of PostScript-ish values enclosed by square-brackets
	array:
		begin: "\\["
		end:   "\\]|(?=$)"
		beginCaptures: 0: name: "punctuation.definition.list.bracket.square.begin.afm"
		endCaptures:   0: name: "punctuation.definition.list.bracket.square.end.afm"
		patterns: [
			{include: "#array"}
			{include: "#numbers"}
			{include: "#psLiteral"}
		]


	# Constants used by Boolean-typed keywords
	boolean:
		name: "constant.language.boolean.$1.afm"
		match: "(?<!\\w)(true|false)(?!\\w)"
	
	
	# Bracketed string: (Another leaf ripped out of PostScript's book)
	bracketedString:
		name: "string.quoted.double.bracketed.afm"
		begin: "\\("
		end:   "\\)|(?=$)"
		beginCaptures: 0: name: "punctuation.definition.bracket.round.begin.afm"
		endCaptures:   0: name: "punctuation.definition.bracket.round.end.afm"
		patterns: [include: "#bracketedString"]
	
	
	# Contents of a "Comment" command, discarded by interpreter
	comment:
		contentName: "comment.line.afm"
		begin: "^Comment(?=\\s|$)"
		end:   "$"
		beginCaptures:
			0: name: "keyword.operator.start-comment.afm"


	# Semicolon separating each column
	delimiter:
		name: "punctuation.delimiter.metrics.semicolon.afm"
		match: ";"
	

	# Hexadecimal value
	hex:
		name: "constant.numeric.integer.hexadecimal.afm"
		match: "(<)(?:[A-Fa-f0-9]+|([^>\\s]+))(>)"
		captures:
			1: name: "punctuation.definition.hex.bracket.angle.begin.afm"
			2: name: "invalid.illegal.syntax.bad-characters.afm"
			3: name: "punctuation.definition.hex.bracket.angle.end.afm"


	# Integer literals
	integer:
		patterns: [{
			match: "(?<!\\w)[-+]?(?=0)\\d+",
			name: "constant.numeric.integer.octal.afm"
		},{
			match: "(?<!\\w)[-+]?\\d+",
			name: "constant.numeric.integer.decimal.afm"
		}]


	# Identifier/ID
	name:
		match: "[^;\\s]+"
		name: "string.unquoted.parameter.identifier.afm"

	
	# Numeric values of any type (float/integer)
	numbers:
		patterns: [
			{include: "#real"}
			{include: "#integer"}
		]
	
	
	# /PostScript /literal /string
	psLiteral:
		name: "support.language.constant.literal.afm"
		match: "(/)[^\\s\\[\\];]+"
		captures:
			1: name: "punctuation.definition.literal.slash.afm"
	
	
	# Floating-point numbers
	real:
		name: "constant.numeric.float.afm"
		match: "(?<!\\w)[-+]?\\d*\\.\\d+"
	
	
	
	# Global font information
	globalInfo:
		patterns: [{
			
			# Font names
			name: "meta.${1:/downcase}-name.afm"
			begin: "^(Font|Full|Family)Name(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramName"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}-name.afm"
		},{
			# Writing directions described by file (0-1 only, 2 both)
			name: "meta.writing-directions.afm"
			begin: "^MetricsSets(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramInteger"]
			beginCaptures:
				0: name: "keyword.operator.metrics-sets.afm"
		},{
			# Whether this is a monospaced/fixed-width typeface
			name: "meta.is-monospaced-font.afm"
			begin: "^IsFixedPitch(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramBoolean"]
			beginCaptures:
				0: name: "keyword.operator.is-fixed-pitch.afm"
		},{
			# Trademark or copyright info
			name: "meta.notice.afm"
			begin: "^Notice(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.notice.afm"
		},{
			# Version pertaining to last revision
			name: "meta.revision.afm"
			begin: "^Version(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.version.afm"
		},{
			# Weight type
			name: "meta.weight.afm"
			begin: "^Weight(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.weight.afm"
		},{
			# Italic angle
			name: "meta.italic-angle.afm"
			begin: "^ItalicAngle(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.italic-angle.afm"
		},{
			# Bounding box
			name: "meta.bounding-box.afm"
			begin: "^FontBBox(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumbers"]
			beginCaptures:
				0: name: "keyword.operator.font-bbox.afm"
		},{
			# Encoding scheme
			name: "meta.encoding-scheme.afm"
			begin: "^EncodingScheme(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.encoding-scheme.afm"
		},{
			# Underline-specific global metric
			name: "meta.underline-property.${1:/downcase}.afm"
			begin: "^Underline(Position|Thickness)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.underline-${1:/downcase}.afm"
		},{
			# Cap/X-height
			name: "meta.metric.${1:/downcase}-height.afm"
			begin: "^(Cap|X)Height(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}-height.afm"
		},{
			# Descender/Ascender length
			name: "meta.metric.${1:/downcase}.afm"
			begin: "^(Descender|Ascender)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				0: name: "keyword.operator.${1:/downcase}.afm"
		},{
			# String-typed miscellaneous properties
			name: "meta.metric.${1:/downcase}.afm"
			begin: "^(CharacterSet|AxisType|AxisLabel)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramString"]
			beginCaptures:
				0: name: "keyword.operator.metadata.afm"
		},{
			# Other metadata properties with integer-typed parameters
			name: "meta.metadata.${1:/downcase}.afm"
			begin: "^(Characters|EscChar|MappingScheme)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumber"]
			beginCaptures:
				1: name: "keyword.operator.metadata.afm"
		},{
			# Other Boolean-typed metadata properties
			name: "meta.metadata.${1:/downcase}.afm"
			begin: "^(IsBaseFont|IsFixedV|IsCIDFont)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramBoolean"]
			beginCaptures:
				1: name: "keyword.operator.metadata.afm"
		},{
			# Number-typed properties
			name:  "meta.metadata.${1:/downcase}.afm"
			begin: "^(CharWidth|VVector|Masters|Axes|Std[HV]W)(?=\\s|$)"
			end:   "^|$"
			patterns: [include: "#paramNumbers"]
			beginCaptures:
				1: name: "keyword.operator.metadata.afm"
		},{
			# Properties which use/expect arrays (AMFM files)
			name:  "meta.metadata.${1:/downcase}.afm"
			begin: "^(WeightVector|BlendDesign(Positions|Map)|BlendAxisTypes)(?=\\s|$)"
			end:   "^|$"
			patterns: [
				{include: "#array"}
				{include: "#numbers"}
				{include: "#psLiteral"}
			]
			beginCaptures:
				1: name: "keyword.operator.metadata.afm"
		}]
	
	
	# Individual character metrics
	charMetrics:
		name: "meta.metrics-list.afm"
		begin: "^(StartCharMetrics)(?:\\s+(\\d+))?\\s*$"
		end:   "^EndCharMetrics\\s*$"
		beginCaptures:
			1: name: "keyword.control.start.metrics.afm"
			2: name: "constant.numeric.decimal.integer.afm"
		endCaptures:
			0: name: "keyword.control.end.metrics.afm"
		patterns: [{
			include: "#comment"
		},{
			# Metrics for an unlisted character
			name: "meta.unencoded.character.metrics.afm"
			begin: "^\\s*(?=C\\s+-\\d)"
			end:   "$"
			patterns: [include: "#charMetricInnards"]
		},{
			# Individual line of metric data
			name: "meta.character.metrics.afm"
			begin: "^\\s*"
			end:   "$"
			patterns: [include: "#charMetricInnards"]
		}]
	
	
	# Patterns matched inside a character-metrics row
	charMetricInnards:
		patterns: [{
			include: "#delimiter"
		},{
			# Character code: Hexadecimal
			name: "meta.character.code.hexadecimal.afm"
			match: "\\G(CH)\\s+(<[^>\\s]++>)\\s*(?=;|$)"
			captures:
				1: name: "variable.assignment.codepoint.afm"
				2: patterns: [include: "#hex"]
		},{
			# Character code: Decimal
			name: "meta.character.code.decimal.afm"
			match: "\\G(C)\\s+([-+]?\\d+)\\s*(?=;|$)"
			captures:
				1: name: "variable.assignment.codepoint.afm"
				2: patterns: [include: "#integer"]
		},{
			# Character width of both X and Y dimensions
			name: "meta.metric.character.width.afm"
			begin: "(?<=\\s|^|;)(W[01]?|VV)(?=\\s|;|$)"
			end:   "(?=;|$)"
			beginCaptures:
				1: name: "variable.assignment.character-width.afm"
			patterns: [include: "#numbers"]
		},{
			# Character width of a single direction
			name: "meta.metric.character.width.afm"
			match: "(?<=\\s|^|;)(W[01]?(X|Y))(?:\\s+([-+]?[\\d.]+)\\s*)(?=\\s|$|;)"
			captures:
				1: name: "variable.assignment.${2:/downcase}-width.afm"
				3: patterns: [include: "#integer"]
		},{
			# PostScript name
			name: "meta.metric.character.name.afm"
			match: "(?<=\\s|^|;)(N)(?:\\s+([^;\\s]+))?\\s*(?=\\s|$|;)"
			captures:
				1: name: "variable.assignment.character.name.afm"
				2: name: "string.unquoted.parameter.identifier.afm"
		},{
			# Bounding box
			name: "meta.metric.bounding-box.afm"
			begin: "(?<=\\s|^|;)(B)(?=\\s|$|;)"
			end:   "(?=$|;)"
			beginCaptures:
				1: name: "variable.assignment.metric.afm"
			patterns: [include: "#numbers"]
		},{
			# Successor ligature
			name: "meta.metric.next-ligature.afm"
			begin: "(?<=\\s|^|;)(L)(?=\\s|$|;)"
			end:   "(?=$|;)"
			beginCaptures:
				1: name: "variable.assignment.metric.afm"
			patterns: [include: "#name"]
		}]
	
	
	compositesData:
		name:  "meta.composites.afm"
		begin: "^(StartComposites)(?:\\s+([-+]?\\d+))?\\s*$"
		end:   "^EndComposites"
		beginCaptures:
			1: name: "keyword.control.start.metrics.afm"
			2: patterns: [include: "#integer"]
		endCaptures:
			0: name: "keyword.control.end.metrics.afm"
		patterns: [
			{include: "#comment"}
			name: "meta.composition.afm"
			begin: "^CC(?=\\s|$|;)"
			end:   "$"
			beginCaptures:
				0: name: "keyword.operator.char-comp.afm"
			patterns: [{
				include: "#delimiter"
			},{
				match: "\\G\\s+([^;\\s]+)(?:\\s+([-+]?\\d+))?"
				captures:
					1: name: "string.unquoted.parameter.identifier.afm"
					2: patterns: [include: "#integer"]
			},{
				match: "(?<=;|\\s)(PCC)\\s+([^;\\s]+)"
				captures:
					1: name: "keyword.operator.char-comp.afm"
					2: name: "string.unquoted.parameter.identifier.afm"
			}, include: "#numbers"]
		]
	
	
	# Kerning data
	kerningData:
		name: "meta.kerning-data.afm"
		begin: "^(StartKernData)\\s*$"
		end:   "^EndKernData\\s*$"
		beginCaptures: 1: name: "keyword.control.start.metrics.afm"
		endCaptures:   0: name: "keyword.control.end.metrics.afm"
		patterns: [{
			
			# Track kerning section
			begin: "^(StartTrackKern)(?:\\s+([-+]?\\d+))?\\s*$"
			end:   "^EndTrackKern\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.metrics.afm"
				2: patterns: [include: "#integer"]
			endCaptures:
				0: name: "keyword.control.end.metrics.afm"
			patterns: [
				{include: "#comment"}
				{include: "#kerningTrack"}
			]
		},{
			# Pair-wise kerning
			begin: "^(StartKernPairs[0-1]?)(?:\\s+([-+]?\\d+))?\\s*$"
			end:   "^EndKernPairs\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.metrics.afm"
				2: patterns: [include: "#integer"]
			endCaptures:
				0: name: "keyword.control.end.metrics.afm"
			patterns: [
				{include: "#comment"}
				{include: "#kerningPairs"}
			]
		}]
	
	
	kerningPairs:
		patterns: [{
			name: "meta.kerning-pair.by-codepoint.afm"
			begin: "^KPH(?=\\s|$)"
			end:   "^|$"
			beginCaptures:
				0: name: "keyword.operator.kern-pair.afm"
			patterns: [{
				match: "\\G((?:\\s+<[^>\\s]*>)+)\\s+"
				captures:
					1: patterns: [include: "#hex"]
			}, include: "#numbers"]
		},{
			name: "meta.kerning-pair.by-name.afm"
			begin: "^KP[XY]?(?=\\s|$)"
			end:   "^|$"
			beginCaptures:
				0: name: "keyword.operator.kern-pair.afm"
			patterns: [{
				match: "\\G((?:\\s+\\S+){1,2})"
				captures:
					1: patterns: [include: "#name"]
			}, include: "#numbers"]
		}]
	
	
	# Sequence of track-kerning metrics
	kerningTrack:
		begin: "^(TrackKern)(?=\\s|$)"
		end:   "^|$"
		patterns: [include: "#numbers"]
		beginCaptures:
			1: name: "keyword.operator.track-kern.afm"
	
	
	# Section-types specific to AMFM/ACFM files
	amfmSpecific:
		name: "meta.${2:/downcase}.afm"
		begin: "^(Start(Descendent|Direction|Axis|Master))(?:\\s+(\\S.*))?"
		end:   "^End\\2\\s*$"
		patterns: [include: "#main"]
		beginCaptures:
			1: name: "keyword.control.start.${2:/downcase}.afm"
			3: patterns: [
				{include: "#hex"}
				{include: "#integer"}
			]
		endCaptures:
			0: name: "keyword.control.end.${2:/downcase}.afm"
	
	
	# Character-data list specific to AMFM/ACFM files
	primaryFonts:
		name: "meta.primary-fonts.afm"
		begin: "^(StartPrimaryFonts)(?:\\s+([-+]?\\d+))?\\s*$"
		end:   "\\bEndPrimaryFonts(?=\\s|$)|(?!P)(?=\\w)"
		beginCaptures:
			1: name: "keyword.control.start.font-list.afm"
			2: patterns: [include: "#integer"]
		endCaptures:
			0: name: "keyword.control.end.font-list.afm"
		patterns: [
			{include: "#comment"}
			{include: "#delimiter"}
			{include: "#primaryFontLine"}
		]
	
	
	# Single font listed inside `(Start|End)PrimaryFonts` keywords
	primaryFontLine:
		patterns: [{
			# Invalid/empty field
			name: "invalid.illegal.syntax.empty-field.afm"
			match: "(?<=^|\\s|;)(?:PC|PL|PN)(?=\\s*;)"
		},{
			# Primary coordinates
			name:  "meta.primary-coordinates.afm"
			begin: "(?<=^|\\s|;)PC(?=\\s|$)"
			end:   "(?=;|$|[A-Z])"
			beginCaptures:
				0: name: "variable.assignment.metadata.afm"
			patterns: [
				{include: "#real"}
				{include: "#integer"}
			]
		},{
			begin: "(?<=\\s|;)(P[LN])\\s+"
			end:   "(?=;|$)"
			beginCaptures:
				1: name: "variable.assignment.metadata.afm"
			patterns: [
				{include: "#bracketedString"}
				{include: "#delimiter"}
			]
		}, include: "#delimiter"]
		
	
	# Boolean-typed property
	paramBoolean:
		patterns: [{
			match: "\\G\\s+(true|false)\\s*$"
			captures:
				1: patterns: [include: "#boolean"]
		}, include: "#paramInvalid"]
	
	
	# Value of an integer-typed keyword
	paramInteger:
		patterns: [{
			match: "\\G\\s+([-+]?[0-9]+)\\s*$"
			captures: 1: patterns: [include: "#integer"]
		}, include: "#paramInvalid"]
	
	
	# Something that doesn't belong where it was found
	paramInvalid:
		match: "\\G\\s+(\\S+.+)\\s*$"
		captures:
			1: name: "invalid.illegal.syntax.type.afm"
	
	
	# Same as `paramString`, except with different scope
	paramName:
		match: "\\G\\s+(\\S+.*)\\s*$"
		captures:
			1: name: "entity.name.identifier.afm"
	
	
	# Any numeric value: Either floating-point or integer
	paramNumber:
		patterns: [{
			match: "\\G\\s+([-+]?(?:\\d*\\.\\d+|\\d+))\\s*$"
			captures: 1: patterns: [
				{include: "#real"}
				{include: "#integer"}]
		}, include: "#paramInvalid"]
	
	# Multiple numeric values
	paramNumbers:
		patterns: [
			{include: "#real"}
			{include: "#integer"}
			
			match: "(?![-+0-9.])\\S+",
			name: "invalid.illegal.syntax.type.afm"]
	
	
	# Freeform character data, extending to EOL. Quotes not required.
	paramString:
		name: "variable.assignment.afm"
		match: "\\G\\s+(\\S.*)\\s*$"
		captures:
			1: name: "string.unquoted.afm"
	
	
	# Generic variable reference
	paramVar:
		match: "\\G\\s+(\\S.*)\\s*$"
		captures:
			1: name: "variable.assignment.afm"
	


	# Sections of AFM source delimited by `(Start|End)…`-type statements
	resources:
		patterns: [{
			
			# AFM: Font Metrics file
			name: "meta.metrics.file-resource.afm"
			begin: "^(StartFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		},{
			
			# ACFM: Composite Font Metrics
			name: "meta.composite.metrics.file-resource.afm"
			begin: "^(StartCompFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndCompFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		},{
			
			# AMFM: Master Font Metrics
			name: "meta.master.metrics.file-resource.afm"
			begin: "^(StartMasterFontMetrics)\\s+(\\d+(?:\\.\\d+)?)?\\s*$"
			end:   "^(EndMasterFontMetrics)\\s*$"
			beginCaptures:
				1: name: "keyword.control.start.file.afm"
				2: name: "constant.numeric.float.decimal.version-number.afm"
			endCaptures:
				1: name: "keyword.control.end.file.afm"
			patterns: [include: "#main"]
		}]


	# Unrecognised or user-defined property key
	userDefined:
		match: "^([a-z][A-Za-z0-9]+)(?=\\s)(.*)$"
		captures:
			1: name: "variable.other.custom.afm"
			2: patterns: [include: "#bestGuessHighlights"]
	
	
	# Anything starting with a capital letter is reserved by Adobe for future use
	reserved:
		match: "^([A-Z][A-Za-z0-9]+)(?=\\s)(.*)$"
		captures:
			1: name: "variable.other.reserved.afm"
			2: patterns: [include: "#bestGuessHighlights"]
	
	
	bestGuessHighlights:
		patterns: [{
			match: "\\G\\s*(true|false)(?=\\s|$)"
			captures:
				1: patterns: [include: "#boolean"]
		},{
			match: "^(?:\\s+[-+]?[.\\d]+)+\\s*$"
			captures: 0: patterns: [include: "#numbers"]
		},{
			match: "^\\s*(\\[.*\\])\\s*$"
			captures: 0: patterns: [
				{include: "#array"}
				{include: "#main"}]
		},{
			match: "^\\s*<[A-Fa-f0-9]+>\\s*$"
			captures: 0: patterns: [include: "#hex"]
		},{
			match: "(?:(?:^|\\s+)/[^\\s\\[\\];]+)+\\s*$"
			captures:
				0: patterns: [include: "#psLiteral"]
		},{
			match: "^.+$"
			name: "variable.assignment.afm"
			captures:
				0: name: "string.unquoted.afm"
		}]
